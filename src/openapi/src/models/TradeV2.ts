/* tslint:disable */
/* eslint-disable */
/**
 * Luno API
 * The Luno API provides developers with a wealth of financial information provided through the Luno platform.  Through this secure system developers can:  <ul>    <li>Create accounts for trading in cryptocurrencies</li>    <li>Access current and historic cryptocurrency market data</li>    <li>Submit trade orders and view order status</li>    <li>Buy and sell Bitcoin and Ethereum</li>    <li>Send and receive Bitcoin and Ethereum</li>    <li>Generate Bitcoin and Ethereum wallet addresses</li>  </ul>   The Luno API brings the world of Bitcoin and Ethereum to your doorstep. 
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
/**
 * 
 * @export
 * @interface TradeV2
 */
export interface TradeV2 {
    /**
     * Amount of base filled
     * @type {string}
     * @memberof TradeV2
     */
    base?: string;
    /**
     * Client Order ID has the value that was passed in when the Order was posted.
     * @type {string}
     * @memberof TradeV2
     */
    clientOrderId?: string;
    /**
     * Amount of counter filled
     * @type {string}
     * @memberof TradeV2
     */
    counter?: string;
    /**
     * Base amount of fees charged
     * @type {string}
     * @memberof TradeV2
     */
    feeBase?: string;
    /**
     * Counter amount of fees charged
     * @type {string}
     * @memberof TradeV2
     */
    feeCounter?: string;
    /**
     * 
     * @type {boolean}
     * @memberof TradeV2
     */
    isBuy?: boolean;
    /**
     * Unique order identifier
     * @type {string}
     * @memberof TradeV2
     */
    orderId?: string;
    /**
     * Currency pair
     * @type {string}
     * @memberof TradeV2
     */
    pair?: string;
    /**
     * Order price
     * @type {string}
     * @memberof TradeV2
     */
    price?: string;
    /**
     * 
     * @type {number}
     * @memberof TradeV2
     */
    sequence?: number;
    /**
     * Unix timestamp in milliseconds
     * @type {string}
     * @memberof TradeV2
     */
    timestamp?: string;
    /**
     * Order type
     * @type {string}
     * @memberof TradeV2
     */
    type?: TradeV2TypeEnum;
    /**
     * Order volume
     * @type {string}
     * @memberof TradeV2
     */
    volume?: string;
}


/**
 * @export
 */
export const TradeV2TypeEnum = {
    Bid: 'BID',
    Ask: 'ASK'
} as const;
export type TradeV2TypeEnum = typeof TradeV2TypeEnum[keyof typeof TradeV2TypeEnum];


/**
 * Check if a given object implements the TradeV2 interface.
 */
export function instanceOfTradeV2(value: object): boolean {
    let isInstance = true;

    return isInstance;
}

export function TradeV2FromJSON(json: any): TradeV2 {
    return TradeV2FromJSONTyped(json, false);
}

export function TradeV2FromJSONTyped(json: any, ignoreDiscriminator: boolean): TradeV2 {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'base': !exists(json, 'base') ? undefined : json['base'],
        'clientOrderId': !exists(json, 'client_order_id') ? undefined : json['client_order_id'],
        'counter': !exists(json, 'counter') ? undefined : json['counter'],
        'feeBase': !exists(json, 'fee_base') ? undefined : json['fee_base'],
        'feeCounter': !exists(json, 'fee_counter') ? undefined : json['fee_counter'],
        'isBuy': !exists(json, 'is_buy') ? undefined : json['is_buy'],
        'orderId': !exists(json, 'order_id') ? undefined : json['order_id'],
        'pair': !exists(json, 'pair') ? undefined : json['pair'],
        'price': !exists(json, 'price') ? undefined : json['price'],
        'sequence': !exists(json, 'sequence') ? undefined : json['sequence'],
        'timestamp': !exists(json, 'timestamp') ? undefined : json['timestamp'],
        'type': !exists(json, 'type') ? undefined : json['type'],
        'volume': !exists(json, 'volume') ? undefined : json['volume'],
    };
}

export function TradeV2ToJSON(value?: TradeV2 | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'base': value.base,
        'client_order_id': value.clientOrderId,
        'counter': value.counter,
        'fee_base': value.feeBase,
        'fee_counter': value.feeCounter,
        'is_buy': value.isBuy,
        'order_id': value.orderId,
        'pair': value.pair,
        'price': value.price,
        'sequence': value.sequence,
        'timestamp': value.timestamp,
        'type': value.type,
        'volume': value.volume,
    };
}

