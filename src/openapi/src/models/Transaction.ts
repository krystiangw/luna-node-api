/* tslint:disable */
/* eslint-disable */
/**
 * Luno API
 * The Luno API provides developers with a wealth of financial information provided through the Luno platform.  Through this secure system developers can:  <ul>    <li>Create accounts for trading in cryptocurrencies</li>    <li>Access current and historic cryptocurrency market data</li>    <li>Submit trade orders and view order status</li>    <li>Buy and sell Bitcoin and Ethereum</li>    <li>Send and receive Bitcoin and Ethereum</li>    <li>Generate Bitcoin and Ethereum wallet addresses</li>  </ul>   The Luno API brings the world of Bitcoin and Ethereum to your doorstep. 
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { DetailFields } from './DetailFields';
import {
    DetailFieldsFromJSON,
    DetailFieldsFromJSONTyped,
    DetailFieldsToJSON,
} from './DetailFields';

/**
 * 
 * @export
 * @interface Transaction
 */
export interface Transaction {
    /**
     * 
     * @type {string}
     * @memberof Transaction
     */
    accountId?: string;
    /**
     * Amount available
     * @type {string}
     * @memberof Transaction
     */
    available?: string;
    /**
     * Change in amount available
     * @type {string}
     * @memberof Transaction
     */
    availableDelta?: string;
    /**
     * Account balance
     * @type {string}
     * @memberof Transaction
     */
    balance?: string;
    /**
     * Change in balance
     * @type {string}
     * @memberof Transaction
     */
    balanceDelta?: string;
    /**
     * 
     * @type {string}
     * @memberof Transaction
     */
    currency?: string;
    /**
     * Human-readable description of the transaction.
     * @type {string}
     * @memberof Transaction
     */
    description?: string;
    /**
     * 
     * @type {DetailFields}
     * @memberof Transaction
     */
    detailFields?: DetailFields;
    /**
     * Human-readable label-value attributes.
     * @type {{ [key: string]: string; }}
     * @memberof Transaction
     */
    details?: { [key: string]: string; };
    /**
     * The kind of the transaction indicates the transaction flow
     * 
     * Kinds explained:<br>
     * <code>FEE</code> when transaction is towards Luno fees<br>
     * <code>TRANSFER</code> when the transaction is a one way flow of funds, e.g. a deposit or crypto send<br>
     * <code>EXCHANGE</code> when the transaction is part of a two way exchange, e.g. a trade or instant buy
     * @type {string}
     * @memberof Transaction
     */
    kind?: TransactionKindEnum;
    /**
     * A unique reference for the transaction this statement entry relates to.
     * There may be multiple statement entries related to the same transaction.
     * E.g. a withdrawal and the withdrawal fee are two separate statement entries with the same reference.
     * @type {string}
     * @memberof Transaction
     */
    reference?: string;
    /**
     * 
     * @type {number}
     * @memberof Transaction
     */
    rowIndex?: number;
    /**
     * Unix timestamp, in milliseconds
     * @type {string}
     * @memberof Transaction
     */
    timestamp?: string;
}


/**
 * @export
 */
export const TransactionKindEnum = {
    Fee: 'FEE',
    Transfer: 'TRANSFER',
    Exchange: 'EXCHANGE',
    Interest: 'INTEREST'
} as const;
export type TransactionKindEnum = typeof TransactionKindEnum[keyof typeof TransactionKindEnum];


/**
 * Check if a given object implements the Transaction interface.
 */
export function instanceOfTransaction(value: object): boolean {
    let isInstance = true;

    return isInstance;
}

export function TransactionFromJSON(json: any): Transaction {
    return TransactionFromJSONTyped(json, false);
}

export function TransactionFromJSONTyped(json: any, ignoreDiscriminator: boolean): Transaction {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'accountId': !exists(json, 'account_id') ? undefined : json['account_id'],
        'available': !exists(json, 'available') ? undefined : json['available'],
        'availableDelta': !exists(json, 'available_delta') ? undefined : json['available_delta'],
        'balance': !exists(json, 'balance') ? undefined : json['balance'],
        'balanceDelta': !exists(json, 'balance_delta') ? undefined : json['balance_delta'],
        'currency': !exists(json, 'currency') ? undefined : json['currency'],
        'description': !exists(json, 'description') ? undefined : json['description'],
        'detailFields': !exists(json, 'detail_fields') ? undefined : DetailFieldsFromJSON(json['detail_fields']),
        'details': !exists(json, 'details') ? undefined : json['details'],
        'kind': !exists(json, 'kind') ? undefined : json['kind'],
        'reference': !exists(json, 'reference') ? undefined : json['reference'],
        'rowIndex': !exists(json, 'row_index') ? undefined : json['row_index'],
        'timestamp': !exists(json, 'timestamp') ? undefined : json['timestamp'],
    };
}

export function TransactionToJSON(value?: Transaction | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'account_id': value.accountId,
        'available': value.available,
        'available_delta': value.availableDelta,
        'balance': value.balance,
        'balance_delta': value.balanceDelta,
        'currency': value.currency,
        'description': value.description,
        'detail_fields': DetailFieldsToJSON(value.detailFields),
        'details': value.details,
        'kind': value.kind,
        'reference': value.reference,
        'row_index': value.rowIndex,
        'timestamp': value.timestamp,
    };
}

