/* tslint:disable */
/* eslint-disable */
/**
 * Luno API
 * The Luno API provides developers with a wealth of financial information provided through the Luno platform.  Through this secure system developers can:  <ul>    <li>Create accounts for trading in cryptocurrencies</li>    <li>Access current and historic cryptocurrency market data</li>    <li>Submit trade orders and view order status</li>    <li>Buy and sell Bitcoin and Ethereum</li>    <li>Send and receive Bitcoin and Ethereum</li>    <li>Generate Bitcoin and Ethereum wallet addresses</li>  </ul>   The Luno API brings the world of Bitcoin and Ethereum to your doorstep. 
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { Ticker } from './Ticker';
import {
    TickerFromJSON,
    TickerFromJSONTyped,
    TickerToJSON,
} from './Ticker';

/**
 * ListTickersResponse response for /api/tickers
 * @export
 * @interface ListTickersResponse
 */
export interface ListTickersResponse {
    /**
     * 
     * @type {Array<Ticker>}
     * @memberof ListTickersResponse
     */
    tickers?: Array<Ticker>;
}

/**
 * Check if a given object implements the ListTickersResponse interface.
 */
export function instanceOfListTickersResponse(value: object): boolean {
    let isInstance = true;

    return isInstance;
}

export function ListTickersResponseFromJSON(json: any): ListTickersResponse {
    return ListTickersResponseFromJSONTyped(json, false);
}

export function ListTickersResponseFromJSONTyped(json: any, ignoreDiscriminator: boolean): ListTickersResponse {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'tickers': !exists(json, 'tickers') ? undefined : ((json['tickers'] as Array<any>).map(TickerFromJSON)),
    };
}

export function ListTickersResponseToJSON(value?: ListTickersResponse | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'tickers': value.tickers === undefined ? undefined : ((value.tickers as Array<any>).map(TickerToJSON)),
    };
}

