/* tslint:disable */
/* eslint-disable */
/**
 * Luno API
 * The Luno API provides developers with a wealth of financial information provided through the Luno platform.  Through this secure system developers can:  <ul>    <li>Create accounts for trading in cryptocurrencies</li>    <li>Access current and historic cryptocurrency market data</li>    <li>Submit trade orders and view order status</li>    <li>Buy and sell Bitcoin and Ethereum</li>    <li>Send and receive Bitcoin and Ethereum</li>    <li>Generate Bitcoin and Ethereum wallet addresses</li>  </ul>   The Luno API brings the world of Bitcoin and Ethereum to your doorstep. 
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
/**
 * GetOrderResponse response
 * @export
 * @interface GetOrderResponse
 */
export interface GetOrderResponse {
    /**
     * Amount of base filled, this value is always positive.
     * @type {string}
     * @memberof GetOrderResponse
     */
    base?: string;
    /**
     * Time of order completion (Unix milliseconds)
     * 
     * This value is set at the time of this order leaving the order book,
     * either immediately upon posting or later on due to a trade or cancellation.
     * Whilst the order is still pending/live it will be 0.
     * @type {string}
     * @memberof GetOrderResponse
     */
    completedTimestamp?: string;
    /**
     * Amount of counter filled, this value is always positive.
     * @type {string}
     * @memberof GetOrderResponse
     */
    counter?: string;
    /**
     * Time of order creation (Unix milliseconds)
     * @type {string}
     * @memberof GetOrderResponse
     */
    creationTimestamp?: string;
    /**
     * Time of order expiration (Unix milliseconds)
     * 
     * This value is set at the time of processing a request from you to cancel the order, otherwise it will be 0.
     * @type {string}
     * @memberof GetOrderResponse
     */
    expirationTimestamp?: string;
    /**
     * Base amount of fees to be charged
     * @type {string}
     * @memberof GetOrderResponse
     */
    feeBase?: string;
    /**
     * Counter amount of fees to be charged
     * @type {string}
     * @memberof GetOrderResponse
     */
    feeCounter?: string;
    /**
     * Limit price to transact
     * @type {string}
     * @memberof GetOrderResponse
     */
    limitPrice?: string;
    /**
     * Limit volume to transact
     * @type {string}
     * @memberof GetOrderResponse
     */
    limitVolume?: string;
    /**
     * 
     * @type {string}
     * @memberof GetOrderResponse
     */
    orderId?: string;
    /**
     * Specifies the market.
     * @type {string}
     * @memberof GetOrderResponse
     */
    pair?: string;
    /**
     * <code>PENDING</code> The order has been placed. Some trades may have
     * taken place but the order is not filled yet.<br>
     * <code>COMPLETE</code> The order is no longer active. It has been settled
     * or has been cancelled.
     * @type {string}
     * @memberof GetOrderResponse
     */
    state?: GetOrderResponseStateEnum;
    /**
     * The Time in force option used when the LimitOrder was posted.
     * 
     * Only returned on limit orders.<br>
     * <code>GTC</code> Good 'Til Cancelled. The order remains open until it is filled or cancelled by the user. (default)</br>
     * <code>IOC</code> Immediate Or Cancel. The part of the order that cannot be filled immediately will be cancelled. Cannot be post-only.</br>
     * <code>FOK</code> Fill Or Kill. If the order cannot be filled immediately and completely it will be cancelled before any trade. Cannot be post-only.
     * @type {string}
     * @memberof GetOrderResponse
     */
    timeInForce?: string;
    /**
     * <code>BUY</code> buy market order.<br>
     * <code>SELL</code> sell market order.<br>
     * <code>BID</code> bid (buy) limit order.<br>
     * <code>ASK</code> ask (sell) limit order.
     * @type {string}
     * @memberof GetOrderResponse
     */
    type?: GetOrderResponseTypeEnum;
}


/**
 * @export
 */
export const GetOrderResponseStateEnum = {
    Pending: 'PENDING',
    Complete: 'COMPLETE'
} as const;
export type GetOrderResponseStateEnum = typeof GetOrderResponseStateEnum[keyof typeof GetOrderResponseStateEnum];

/**
 * @export
 */
export const GetOrderResponseTypeEnum = {
    Buy: 'BUY',
    Sell: 'SELL',
    Bid: 'BID',
    Ask: 'ASK'
} as const;
export type GetOrderResponseTypeEnum = typeof GetOrderResponseTypeEnum[keyof typeof GetOrderResponseTypeEnum];


/**
 * Check if a given object implements the GetOrderResponse interface.
 */
export function instanceOfGetOrderResponse(value: object): boolean {
    let isInstance = true;

    return isInstance;
}

export function GetOrderResponseFromJSON(json: any): GetOrderResponse {
    return GetOrderResponseFromJSONTyped(json, false);
}

export function GetOrderResponseFromJSONTyped(json: any, ignoreDiscriminator: boolean): GetOrderResponse {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'base': !exists(json, 'base') ? undefined : json['base'],
        'completedTimestamp': !exists(json, 'completed_timestamp') ? undefined : json['completed_timestamp'],
        'counter': !exists(json, 'counter') ? undefined : json['counter'],
        'creationTimestamp': !exists(json, 'creation_timestamp') ? undefined : json['creation_timestamp'],
        'expirationTimestamp': !exists(json, 'expiration_timestamp') ? undefined : json['expiration_timestamp'],
        'feeBase': !exists(json, 'fee_base') ? undefined : json['fee_base'],
        'feeCounter': !exists(json, 'fee_counter') ? undefined : json['fee_counter'],
        'limitPrice': !exists(json, 'limit_price') ? undefined : json['limit_price'],
        'limitVolume': !exists(json, 'limit_volume') ? undefined : json['limit_volume'],
        'orderId': !exists(json, 'order_id') ? undefined : json['order_id'],
        'pair': !exists(json, 'pair') ? undefined : json['pair'],
        'state': !exists(json, 'state') ? undefined : json['state'],
        'timeInForce': !exists(json, 'time_in_force') ? undefined : json['time_in_force'],
        'type': !exists(json, 'type') ? undefined : json['type'],
    };
}

export function GetOrderResponseToJSON(value?: GetOrderResponse | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'base': value.base,
        'completed_timestamp': value.completedTimestamp,
        'counter': value.counter,
        'creation_timestamp': value.creationTimestamp,
        'expiration_timestamp': value.expirationTimestamp,
        'fee_base': value.feeBase,
        'fee_counter': value.feeCounter,
        'limit_price': value.limitPrice,
        'limit_volume': value.limitVolume,
        'order_id': value.orderId,
        'pair': value.pair,
        'state': value.state,
        'time_in_force': value.timeInForce,
        'type': value.type,
    };
}

