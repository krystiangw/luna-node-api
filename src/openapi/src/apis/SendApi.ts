/* tslint:disable */
/* eslint-disable */
/**
 * Luno API
 * The Luno API provides developers with a wealth of financial information provided through the Luno platform.  Through this secure system developers can:  <ul>    <li>Create accounts for trading in cryptocurrencies</li>    <li>Access current and historic cryptocurrency market data</li>    <li>Submit trade orders and view order status</li>    <li>Buy and sell Bitcoin and Ethereum</li>    <li>Send and receive Bitcoin and Ethereum</li>    <li>Generate Bitcoin and Ethereum wallet addresses</li>  </ul>   The Luno API brings the world of Bitcoin and Ethereum to your doorstep. 
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  SendFeeResponse,
  SendResponse,
} from '../models';
import {
    SendFeeResponseFromJSON,
    SendFeeResponseToJSON,
    SendResponseFromJSON,
    SendResponseToJSON,
} from '../models';

export interface SendRequest {
    amount: string;
    currency: string;
    address: string;
    description?: string;
    message?: string;
    externalId?: string;
    hasDestinationTag?: boolean;
    destinationTag?: number;
}

export interface SendFeeRequest {
    amount: string;
    currency: string;
    address: string;
}

/**
 * SendApi - interface
 * 
 * @export
 * @interface SendApiInterface
 */
export interface SendApiInterface {
    /**
     * Send assets from an Account. Please note that the asset type sent must match the receive address of the same cryptocurrency of the same type - Bitcoin to Bitcoin, Ethereum to Ethereum, etc.  Sends can be made to cryptocurrency receive addresses.  <b>Note:</b> This is currently unavailable to users who are verified in countries with money travel rules.  Permissions required: <code>Perm_W_Send</code>
     * @summary # Send
     * @param {string} amount Amount to send as a decimal string.
     * @param {string} currency Currency to send.
     * @param {string} address Destination address or email address.  &lt;b&gt;Note&lt;/b&gt;: &lt;ul&gt; &lt;li&gt;Ethereum addresses must be &lt;a href&#x3D;\&quot;https://github.com/ethereum/EIPs/blob/master/EIPS/eip-55.md\&quot; target&#x3D;\&quot;_blank\&quot; rel&#x3D;\&quot;nofollow\&quot;&gt;checksummed&lt;/a&gt;.&lt;/li&gt; &lt;li&gt;Ethereum sends to email addresses are not supported.&lt;/li&gt; &lt;/ul&gt;
     * @param {string} [description] User description for the transaction to record on the account statement.
     * @param {string} [message] Message to send to the recipient. This is only relevant when sending to an email address.
     * @param {string} [externalId] Optional unique ID to associate with this withdrawal. Useful to prevent duplicate sends in case of failure. This supports all alphanumeric characters, as well as \&quot;-\&quot; and \&quot;_\&quot;.
     * @param {boolean} [hasDestinationTag] Optional boolean flag indicating that a XRP destination tag is provided (even if zero).
     * @param {number} [destinationTag] Optional XRP destination tag. Note that HasDestinationTag must be true if this value is provided.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SendApiInterface
     */
    sendRaw(requestParameters: SendRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<SendResponse>>;

    /**
     * Send assets from an Account. Please note that the asset type sent must match the receive address of the same cryptocurrency of the same type - Bitcoin to Bitcoin, Ethereum to Ethereum, etc.  Sends can be made to cryptocurrency receive addresses.  <b>Note:</b> This is currently unavailable to users who are verified in countries with money travel rules.  Permissions required: <code>Perm_W_Send</code>
     * # Send
     */
    send(requestParameters: SendRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<SendResponse>;

    /**
     * Calculate fees involved with a crypto send request.  Send address can be to a cryptocurrency receive address, or the email address of another Luno platform user.  Permissions required: <code>MP_None</code>
     * @summary Estimate send fees
     * @param {string} amount Amount to send as a decimal string.
     * @param {string} currency Currency to send.
     * @param {string} address Destination address or email address.  &lt;b&gt;Note&lt;/b&gt;: &lt;ul&gt; &lt;li&gt;Ethereum addresses must be &lt;a href&#x3D;\&quot;https://github.com/ethereum/EIPs/blob/master/EIPS/eip-55.md\&quot; target&#x3D;\&quot;_blank\&quot; rel&#x3D;\&quot;nofollow\&quot;&gt;checksummed&lt;/a&gt;.&lt;/li&gt; &lt;li&gt;Ethereum sends to email addresses are not supported.&lt;/li&gt; &lt;/ul&gt;
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SendApiInterface
     */
    sendFeeRaw(requestParameters: SendFeeRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<SendFeeResponse>>;

    /**
     * Calculate fees involved with a crypto send request.  Send address can be to a cryptocurrency receive address, or the email address of another Luno platform user.  Permissions required: <code>MP_None</code>
     * Estimate send fees
     */
    sendFee(requestParameters: SendFeeRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<SendFeeResponse>;

}

/**
 * 
 */
export class SendApi extends runtime.BaseAPI implements SendApiInterface {

    /**
     * Send assets from an Account. Please note that the asset type sent must match the receive address of the same cryptocurrency of the same type - Bitcoin to Bitcoin, Ethereum to Ethereum, etc.  Sends can be made to cryptocurrency receive addresses.  <b>Note:</b> This is currently unavailable to users who are verified in countries with money travel rules.  Permissions required: <code>Perm_W_Send</code>
     * # Send
     */
    async sendRaw(requestParameters: SendRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<SendResponse>> {
        if (requestParameters.amount === null || requestParameters.amount === undefined) {
            throw new runtime.RequiredError('amount','Required parameter requestParameters.amount was null or undefined when calling send.');
        }

        if (requestParameters.currency === null || requestParameters.currency === undefined) {
            throw new runtime.RequiredError('currency','Required parameter requestParameters.currency was null or undefined when calling send.');
        }

        if (requestParameters.address === null || requestParameters.address === undefined) {
            throw new runtime.RequiredError('address','Required parameter requestParameters.address was null or undefined when calling send.');
        }

        const queryParameters: any = {};

        if (requestParameters.amount !== undefined) {
            queryParameters['amount'] = requestParameters.amount;
        }

        if (requestParameters.currency !== undefined) {
            queryParameters['currency'] = requestParameters.currency;
        }

        if (requestParameters.address !== undefined) {
            queryParameters['address'] = requestParameters.address;
        }

        if (requestParameters.description !== undefined) {
            queryParameters['description'] = requestParameters.description;
        }

        if (requestParameters.message !== undefined) {
            queryParameters['message'] = requestParameters.message;
        }

        if (requestParameters.externalId !== undefined) {
            queryParameters['external_id'] = requestParameters.externalId;
        }

        if (requestParameters.hasDestinationTag !== undefined) {
            queryParameters['has_destination_tag'] = requestParameters.hasDestinationTag;
        }

        if (requestParameters.destinationTag !== undefined) {
            queryParameters['destination_tag'] = requestParameters.destinationTag;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/1/send`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => SendResponseFromJSON(jsonValue));
    }

    /**
     * Send assets from an Account. Please note that the asset type sent must match the receive address of the same cryptocurrency of the same type - Bitcoin to Bitcoin, Ethereum to Ethereum, etc.  Sends can be made to cryptocurrency receive addresses.  <b>Note:</b> This is currently unavailable to users who are verified in countries with money travel rules.  Permissions required: <code>Perm_W_Send</code>
     * # Send
     */
    async send(requestParameters: SendRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<SendResponse> {
        const response = await this.sendRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Calculate fees involved with a crypto send request.  Send address can be to a cryptocurrency receive address, or the email address of another Luno platform user.  Permissions required: <code>MP_None</code>
     * Estimate send fees
     */
    async sendFeeRaw(requestParameters: SendFeeRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<SendFeeResponse>> {
        if (requestParameters.amount === null || requestParameters.amount === undefined) {
            throw new runtime.RequiredError('amount','Required parameter requestParameters.amount was null or undefined when calling sendFee.');
        }

        if (requestParameters.currency === null || requestParameters.currency === undefined) {
            throw new runtime.RequiredError('currency','Required parameter requestParameters.currency was null or undefined when calling sendFee.');
        }

        if (requestParameters.address === null || requestParameters.address === undefined) {
            throw new runtime.RequiredError('address','Required parameter requestParameters.address was null or undefined when calling sendFee.');
        }

        const queryParameters: any = {};

        if (requestParameters.amount !== undefined) {
            queryParameters['amount'] = requestParameters.amount;
        }

        if (requestParameters.currency !== undefined) {
            queryParameters['currency'] = requestParameters.currency;
        }

        if (requestParameters.address !== undefined) {
            queryParameters['address'] = requestParameters.address;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/1/send_fee`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => SendFeeResponseFromJSON(jsonValue));
    }

    /**
     * Calculate fees involved with a crypto send request.  Send address can be to a cryptocurrency receive address, or the email address of another Luno platform user.  Permissions required: <code>MP_None</code>
     * Estimate send fees
     */
    async sendFee(requestParameters: SendFeeRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<SendFeeResponse> {
        const response = await this.sendFeeRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
