"use strict";
/* tslint:disable */
/* eslint-disable */
/**
 * Luno API
 * The Luno API provides developers with a wealth of financial information provided through the Luno platform.  Through this secure system developers can:  <ul>    <li>Create accounts for trading in cryptocurrencies</li>    <li>Access current and historic cryptocurrency market data</li>    <li>Submit trade orders and view order status</li>    <li>Buy and sell Bitcoin and Ethereum</li>    <li>Send and receive Bitcoin and Ethereum</li>    <li>Generate Bitcoin and Ethereum wallet addresses</li>  </ul>   The Luno API brings the world of Bitcoin and Ethereum to your doorstep.
 *
 * The version of the OpenAPI document: 1.0.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.PostMarketOrderTypeEnum = exports.PostLimitOrderStopDirectionEnum = exports.PostLimitOrderTimeInForceEnum = exports.PostLimitOrderTypeEnum = exports.ListOrdersStateEnum = exports.OrdersApi = void 0;
const runtime = __importStar(require("../runtime"));
const models_1 = require("../models");
/**
 *
 */
class OrdersApi extends runtime.BaseAPI {
    /**
     * Returns the fees and 30 day trading volume (as of midnight) for a given currency pair.  For complete details, please see <a href=\"en/countries\">Fees & Features</a>.  Permissions required: <code>Perm_R_Orders</code>
     * Get fee information
     */
    async getFeeInfoRaw(requestParameters, initOverrides) {
        if (requestParameters.pair === null || requestParameters.pair === undefined) {
            throw new runtime.RequiredError('pair', 'Required parameter requestParameters.pair was null or undefined when calling getFeeInfo.');
        }
        const queryParameters = {};
        if (requestParameters.pair !== undefined) {
            queryParameters['pair'] = requestParameters.pair;
        }
        const headerParameters = {};
        const response = await this.request({
            path: `/api/1/fee_info`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);
        return new runtime.JSONApiResponse(response, (jsonValue) => (0, models_1.GetFeeInfoResponseFromJSON)(jsonValue));
    }
    /**
     * Returns the fees and 30 day trading volume (as of midnight) for a given currency pair.  For complete details, please see <a href=\"en/countries\">Fees & Features</a>.  Permissions required: <code>Perm_R_Orders</code>
     * Get fee information
     */
    async getFeeInfo(requestParameters, initOverrides) {
        const response = await this.getFeeInfoRaw(requestParameters, initOverrides);
        return await response.value();
    }
    /**
     * Get an Order\'s details by its ID.  Permissions required: <code>Perm_R_Orders</code>
     * Get order
     */
    async getOrderRaw(requestParameters, initOverrides) {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id', 'Required parameter requestParameters.id was null or undefined when calling getOrder.');
        }
        const queryParameters = {};
        const headerParameters = {};
        const response = await this.request({
            path: `/api/1/orders/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);
        return new runtime.JSONApiResponse(response, (jsonValue) => (0, models_1.GetOrderResponseFromJSON)(jsonValue));
    }
    /**
     * Get an Order\'s details by its ID.  Permissions required: <code>Perm_R_Orders</code>
     * Get order
     */
    async getOrder(requestParameters, initOverrides) {
        const response = await this.getOrderRaw(requestParameters, initOverrides);
        return await response.value();
    }
    /**
     * Get the details for an order.  Permissions required: <code>Perm_R_Orders</code>
     * Get Order v2
     */
    async getOrderV2Raw(requestParameters, initOverrides) {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id', 'Required parameter requestParameters.id was null or undefined when calling getOrderV2.');
        }
        const queryParameters = {};
        const headerParameters = {};
        const response = await this.request({
            path: `/api/exchange/2/orders/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);
        return new runtime.JSONApiResponse(response, (jsonValue) => (0, models_1.GetOrder2ResponseFromJSON)(jsonValue));
    }
    /**
     * Get the details for an order.  Permissions required: <code>Perm_R_Orders</code>
     * Get Order v2
     */
    async getOrderV2(requestParameters, initOverrides) {
        const response = await this.getOrderV2Raw(requestParameters, initOverrides);
        return await response.value();
    }
    /**
     * Get the details for an order by order reference or client order ID. Exactly one of the two parameters must be provided, otherwise an error is returned. Permissions required: <code>Perm_R_Orders</code>
     * Get Order v3
     */
    async getOrderV3Raw(requestParameters, initOverrides) {
        const queryParameters = {};
        if (requestParameters.id !== undefined) {
            queryParameters['id'] = requestParameters.id;
        }
        if (requestParameters.clientOrderId !== undefined) {
            queryParameters['client_order_id'] = requestParameters.clientOrderId;
        }
        const headerParameters = {};
        const response = await this.request({
            path: `/api/exchange/3/order`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);
        return new runtime.JSONApiResponse(response, (jsonValue) => (0, models_1.GetOrder2ResponseFromJSON)(jsonValue));
    }
    /**
     * Get the details for an order by order reference or client order ID. Exactly one of the two parameters must be provided, otherwise an error is returned. Permissions required: <code>Perm_R_Orders</code>
     * Get Order v3
     */
    async getOrderV3(requestParameters = {}, initOverrides) {
        const response = await this.getOrderV3Raw(requestParameters, initOverrides);
        return await response.value();
    }
    /**
     * Returns a list of the most recently placed Orders. Users can specify an optional <code>state=PENDING</code> parameter to restrict the results to only open Orders. Users can also specify the market by using the optional currency pair parameter.  Permissions required: <code>Perm_R_Orders</code>
     * List orders
     */
    async listOrdersRaw(requestParameters, initOverrides) {
        const queryParameters = {};
        if (requestParameters.state !== undefined) {
            queryParameters['state'] = requestParameters.state;
        }
        if (requestParameters.pair !== undefined) {
            queryParameters['pair'] = requestParameters.pair;
        }
        if (requestParameters.createdBefore !== undefined) {
            queryParameters['created_before'] = requestParameters.createdBefore;
        }
        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }
        const headerParameters = {};
        const response = await this.request({
            path: `/api/1/listorders`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);
        return new runtime.JSONApiResponse(response, (jsonValue) => (0, models_1.ListOrdersResponseFromJSON)(jsonValue));
    }
    /**
     * Returns a list of the most recently placed Orders. Users can specify an optional <code>state=PENDING</code> parameter to restrict the results to only open Orders. Users can also specify the market by using the optional currency pair parameter.  Permissions required: <code>Perm_R_Orders</code>
     * List orders
     */
    async listOrders(requestParameters = {}, initOverrides) {
        const response = await this.listOrdersRaw(requestParameters, initOverrides);
        return await response.value();
    }
    /**
     * Returns a list of the most recently placed orders ordered from newest to oldest. This endpoint will list up to 100 most recent open orders by default.  Permissions required: <Code>Perm_R_Orders</Code>
     * List Orders v2
     */
    async listOrdersV2Raw(requestParameters, initOverrides) {
        const queryParameters = {};
        if (requestParameters.pair !== undefined) {
            queryParameters['pair'] = requestParameters.pair;
        }
        if (requestParameters.closed !== undefined) {
            queryParameters['closed'] = requestParameters.closed;
        }
        if (requestParameters.createdBefore !== undefined) {
            queryParameters['created_before'] = requestParameters.createdBefore;
        }
        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }
        const headerParameters = {};
        const response = await this.request({
            path: `/api/exchange/2/listorders`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);
        return new runtime.JSONApiResponse(response, (jsonValue) => (0, models_1.ListOrders2ResponseFromJSON)(jsonValue));
    }
    /**
     * Returns a list of the most recently placed orders ordered from newest to oldest. This endpoint will list up to 100 most recent open orders by default.  Permissions required: <Code>Perm_R_Orders</Code>
     * List Orders v2
     */
    async listOrdersV2(requestParameters = {}, initOverrides) {
        const response = await this.listOrdersV2Raw(requestParameters, initOverrides);
        return await response.value();
    }
    /**
     * Returns a list of the recent Trades for a given currency pair for this user, sorted by oldest first. If <code>before</code> is specified, then Trades are returned sorted by most-recent first.  <code>type</code> in the response indicates the type of Order that was placed to participate in the trade. Possible types: <code>BID</code>, <code>ASK</code>.  If <code>is_buy</code> in the response is true, then the Order which completed the trade (market taker) was a Bid Order.  Results of this query may lag behind the latest data.  Permissions required: <code>Perm_R_Orders</code>
     * List trades
     */
    async listUserTradesRaw(requestParameters, initOverrides) {
        if (requestParameters.pair === null || requestParameters.pair === undefined) {
            throw new runtime.RequiredError('pair', 'Required parameter requestParameters.pair was null or undefined when calling listUserTrades.');
        }
        const queryParameters = {};
        if (requestParameters.pair !== undefined) {
            queryParameters['pair'] = requestParameters.pair;
        }
        if (requestParameters.since !== undefined) {
            queryParameters['since'] = requestParameters.since;
        }
        if (requestParameters.before !== undefined) {
            queryParameters['before'] = requestParameters.before;
        }
        if (requestParameters.afterSeq !== undefined) {
            queryParameters['after_seq'] = requestParameters.afterSeq;
        }
        if (requestParameters.beforeSeq !== undefined) {
            queryParameters['before_seq'] = requestParameters.beforeSeq;
        }
        if (requestParameters.sortDesc !== undefined) {
            queryParameters['sort_desc'] = requestParameters.sortDesc;
        }
        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }
        const headerParameters = {};
        const response = await this.request({
            path: `/api/1/listtrades`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);
        return new runtime.JSONApiResponse(response, (jsonValue) => (0, models_1.ListUserTradesResponseFromJSON)(jsonValue));
    }
    /**
     * Returns a list of the recent Trades for a given currency pair for this user, sorted by oldest first. If <code>before</code> is specified, then Trades are returned sorted by most-recent first.  <code>type</code> in the response indicates the type of Order that was placed to participate in the trade. Possible types: <code>BID</code>, <code>ASK</code>.  If <code>is_buy</code> in the response is true, then the Order which completed the trade (market taker) was a Bid Order.  Results of this query may lag behind the latest data.  Permissions required: <code>Perm_R_Orders</code>
     * List trades
     */
    async listUserTrades(requestParameters, initOverrides) {
        const response = await this.listUserTradesRaw(requestParameters, initOverrides);
        return await response.value();
    }
    /**
     * <b>Warning!</b> Orders cannot be reversed once they have executed. Please ensure your program has been thoroughly tested before submitting Orders.  If no <code>base_account_id</code> or <code>counter_account_id</code> are specified, your default base currency or counter currency account will be used. You can find your Account IDs by calling the <a href=\"#operation/getBalances\">Balances</a> API.  Permissions required: <code>Perm_W_Orders</code>
     * Post Limit Order
     */
    async postLimitOrderRaw(requestParameters, initOverrides) {
        if (requestParameters.pair === null || requestParameters.pair === undefined) {
            throw new runtime.RequiredError('pair', 'Required parameter requestParameters.pair was null or undefined when calling postLimitOrder.');
        }
        if (requestParameters.type === null || requestParameters.type === undefined) {
            throw new runtime.RequiredError('type', 'Required parameter requestParameters.type was null or undefined when calling postLimitOrder.');
        }
        if (requestParameters.volume === null || requestParameters.volume === undefined) {
            throw new runtime.RequiredError('volume', 'Required parameter requestParameters.volume was null or undefined when calling postLimitOrder.');
        }
        if (requestParameters.price === null || requestParameters.price === undefined) {
            throw new runtime.RequiredError('price', 'Required parameter requestParameters.price was null or undefined when calling postLimitOrder.');
        }
        const queryParameters = {};
        if (requestParameters.pair !== undefined) {
            queryParameters['pair'] = requestParameters.pair;
        }
        if (requestParameters.type !== undefined) {
            queryParameters['type'] = requestParameters.type;
        }
        if (requestParameters.timeInForce !== undefined) {
            queryParameters['time_in_force'] = requestParameters.timeInForce;
        }
        if (requestParameters.postOnly !== undefined) {
            queryParameters['post_only'] = requestParameters.postOnly;
        }
        if (requestParameters.volume !== undefined) {
            queryParameters['volume'] = requestParameters.volume;
        }
        if (requestParameters.price !== undefined) {
            queryParameters['price'] = requestParameters.price;
        }
        if (requestParameters.stopPrice !== undefined) {
            queryParameters['stop_price'] = requestParameters.stopPrice;
        }
        if (requestParameters.stopDirection !== undefined) {
            queryParameters['stop_direction'] = requestParameters.stopDirection;
        }
        if (requestParameters.baseAccountId !== undefined) {
            queryParameters['base_account_id'] = requestParameters.baseAccountId;
        }
        if (requestParameters.counterAccountId !== undefined) {
            queryParameters['counter_account_id'] = requestParameters.counterAccountId;
        }
        if (requestParameters.timestamp !== undefined) {
            queryParameters['timestamp'] = requestParameters.timestamp;
        }
        if (requestParameters.ttl !== undefined) {
            queryParameters['ttl'] = requestParameters.ttl;
        }
        if (requestParameters.clientOrderId !== undefined) {
            queryParameters['client_order_id'] = requestParameters.clientOrderId;
        }
        const headerParameters = {};
        const response = await this.request({
            path: `/api/1/postorder`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);
        return new runtime.JSONApiResponse(response, (jsonValue) => (0, models_1.PostLimitOrderResponseFromJSON)(jsonValue));
    }
    /**
     * <b>Warning!</b> Orders cannot be reversed once they have executed. Please ensure your program has been thoroughly tested before submitting Orders.  If no <code>base_account_id</code> or <code>counter_account_id</code> are specified, your default base currency or counter currency account will be used. You can find your Account IDs by calling the <a href=\"#operation/getBalances\">Balances</a> API.  Permissions required: <code>Perm_W_Orders</code>
     * Post Limit Order
     */
    async postLimitOrder(requestParameters, initOverrides) {
        const response = await this.postLimitOrderRaw(requestParameters, initOverrides);
        return await response.value();
    }
    /**
     * A Market Order executes immediately, and either buys as much of the asset that can be bought for a set amount of fiat currency, or sells a set amount of the asset for as much as possible.  <b>Warning!</b> Orders cannot be reversed once they have executed. Please ensure your program has been thoroughly tested before submitting Orders.  If no <code>base_account_id</code> or <code>counter_account_id</code> are specified, the default base currency or counter currency account will be used. Users can find their account IDs by calling the <a href=\"#operation/getBalances\">Balances</a> request.  Permissions required: <code>Perm_W_Orders</code>
     * Post Market Order
     */
    async postMarketOrderRaw(requestParameters, initOverrides) {
        if (requestParameters.pair === null || requestParameters.pair === undefined) {
            throw new runtime.RequiredError('pair', 'Required parameter requestParameters.pair was null or undefined when calling postMarketOrder.');
        }
        if (requestParameters.type === null || requestParameters.type === undefined) {
            throw new runtime.RequiredError('type', 'Required parameter requestParameters.type was null or undefined when calling postMarketOrder.');
        }
        const queryParameters = {};
        if (requestParameters.pair !== undefined) {
            queryParameters['pair'] = requestParameters.pair;
        }
        if (requestParameters.type !== undefined) {
            queryParameters['type'] = requestParameters.type;
        }
        if (requestParameters.counterVolume !== undefined) {
            queryParameters['counter_volume'] = requestParameters.counterVolume;
        }
        if (requestParameters.baseVolume !== undefined) {
            queryParameters['base_volume'] = requestParameters.baseVolume;
        }
        if (requestParameters.baseAccountId !== undefined) {
            queryParameters['base_account_id'] = requestParameters.baseAccountId;
        }
        if (requestParameters.counterAccountId !== undefined) {
            queryParameters['counter_account_id'] = requestParameters.counterAccountId;
        }
        if (requestParameters.timestamp !== undefined) {
            queryParameters['timestamp'] = requestParameters.timestamp;
        }
        if (requestParameters.ttl !== undefined) {
            queryParameters['ttl'] = requestParameters.ttl;
        }
        if (requestParameters.clientOrderId !== undefined) {
            queryParameters['client_order_id'] = requestParameters.clientOrderId;
        }
        const headerParameters = {};
        const response = await this.request({
            path: `/api/1/marketorder`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);
        return new runtime.JSONApiResponse(response, (jsonValue) => (0, models_1.PostMarketOrderResponseFromJSON)(jsonValue));
    }
    /**
     * A Market Order executes immediately, and either buys as much of the asset that can be bought for a set amount of fiat currency, or sells a set amount of the asset for as much as possible.  <b>Warning!</b> Orders cannot be reversed once they have executed. Please ensure your program has been thoroughly tested before submitting Orders.  If no <code>base_account_id</code> or <code>counter_account_id</code> are specified, the default base currency or counter currency account will be used. Users can find their account IDs by calling the <a href=\"#operation/getBalances\">Balances</a> request.  Permissions required: <code>Perm_W_Orders</code>
     * Post Market Order
     */
    async postMarketOrder(requestParameters, initOverrides) {
        const response = await this.postMarketOrderRaw(requestParameters, initOverrides);
        return await response.value();
    }
    /**
     * Request to cancel an Order.  <b>Note!</b>: Once an Order has been completed, it can not be reversed. The return value from this request will indicate if the Stop request was successful or not.  Permissions required: <code>Perm_W_Orders</code>
     * Cancel Order
     */
    async stopOrderRaw(requestParameters, initOverrides) {
        if (requestParameters.orderId === null || requestParameters.orderId === undefined) {
            throw new runtime.RequiredError('orderId', 'Required parameter requestParameters.orderId was null or undefined when calling stopOrder.');
        }
        const queryParameters = {};
        if (requestParameters.orderId !== undefined) {
            queryParameters['order_id'] = requestParameters.orderId;
        }
        const headerParameters = {};
        const response = await this.request({
            path: `/api/1/stoporder`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);
        return new runtime.JSONApiResponse(response, (jsonValue) => (0, models_1.StopOrderResponseFromJSON)(jsonValue));
    }
    /**
     * Request to cancel an Order.  <b>Note!</b>: Once an Order has been completed, it can not be reversed. The return value from this request will indicate if the Stop request was successful or not.  Permissions required: <code>Perm_W_Orders</code>
     * Cancel Order
     */
    async stopOrder(requestParameters, initOverrides) {
        const response = await this.stopOrderRaw(requestParameters, initOverrides);
        return await response.value();
    }
}
exports.OrdersApi = OrdersApi;
/**
 * @export
 */
exports.ListOrdersStateEnum = {
    Pending: 'PENDING',
    Complete: 'COMPLETE'
};
/**
 * @export
 */
exports.PostLimitOrderTypeEnum = {
    Bid: 'BID',
    Ask: 'ASK'
};
/**
 * @export
 */
exports.PostLimitOrderTimeInForceEnum = {
    Gtc: 'GTC',
    Ioc: 'IOC',
    Fok: 'FOK'
};
/**
 * @export
 */
exports.PostLimitOrderStopDirectionEnum = {
    Below: 'BELOW',
    Above: 'ABOVE',
    RelativeLastTrade: 'RELATIVE_LAST_TRADE'
};
/**
 * @export
 */
exports.PostMarketOrderTypeEnum = {
    Buy: 'BUY',
    Sell: 'SELL'
};
//# sourceMappingURL=OrdersApi.js.map