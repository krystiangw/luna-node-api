"use strict";
/* tslint:disable */
/* eslint-disable */
/**
 * Luno API
 * The Luno API provides developers with a wealth of financial information provided through the Luno platform.  Through this secure system developers can:  <ul>    <li>Create accounts for trading in cryptocurrencies</li>    <li>Access current and historic cryptocurrency market data</li>    <li>Submit trade orders and view order status</li>    <li>Buy and sell Bitcoin and Ethereum</li>    <li>Send and receive Bitcoin and Ethereum</li>    <li>Generate Bitcoin and Ethereum wallet addresses</li>  </ul>   The Luno API brings the world of Bitcoin and Ethereum to your doorstep.
 *
 * The version of the OpenAPI document: 1.0.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.TransfersApi = void 0;
const runtime = __importStar(require("../runtime"));
const models_1 = require("../models");
/**
 *
 */
class TransfersApi extends runtime.BaseAPI {
    /**
     * Cancels a withdrawal request. This can only be done if the request is still in state <code>PENDING</code>.  Permissions required: <code>Perm_W_Withdrawals</code>
     * Cancel withdrawal request
     */
    async cancelWithdrawalRaw(requestParameters, initOverrides) {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id', 'Required parameter requestParameters.id was null or undefined when calling cancelWithdrawal.');
        }
        const queryParameters = {};
        const headerParameters = {};
        const response = await this.request({
            path: `/api/1/withdrawals/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);
        return new runtime.JSONApiResponse(response, (jsonValue) => (0, models_1.CancelWithdrawalResponseFromJSON)(jsonValue));
    }
    /**
     * Cancels a withdrawal request. This can only be done if the request is still in state <code>PENDING</code>.  Permissions required: <code>Perm_W_Withdrawals</code>
     * Cancel withdrawal request
     */
    async cancelWithdrawal(requestParameters, initOverrides) {
        const response = await this.cancelWithdrawalRaw(requestParameters, initOverrides);
        return await response.value();
    }
    /**
     * Creates a new withdrawal request to the specified beneficiary.  Permissions required: <code>Perm_W_Withdrawals</code>
     * Request a withdrawal
     */
    async createWithdrawalRaw(requestParameters, initOverrides) {
        if (requestParameters.type === null || requestParameters.type === undefined) {
            throw new runtime.RequiredError('type', 'Required parameter requestParameters.type was null or undefined when calling createWithdrawal.');
        }
        if (requestParameters.amount === null || requestParameters.amount === undefined) {
            throw new runtime.RequiredError('amount', 'Required parameter requestParameters.amount was null or undefined when calling createWithdrawal.');
        }
        const queryParameters = {};
        if (requestParameters.type !== undefined) {
            queryParameters['type'] = requestParameters.type;
        }
        if (requestParameters.amount !== undefined) {
            queryParameters['amount'] = requestParameters.amount;
        }
        if (requestParameters.beneficiaryId !== undefined) {
            queryParameters['beneficiary_id'] = requestParameters.beneficiaryId;
        }
        if (requestParameters.fast !== undefined) {
            queryParameters['fast'] = requestParameters.fast;
        }
        if (requestParameters.reference !== undefined) {
            queryParameters['reference'] = requestParameters.reference;
        }
        if (requestParameters.externalId !== undefined) {
            queryParameters['external_id'] = requestParameters.externalId;
        }
        const headerParameters = {};
        const response = await this.request({
            path: `/api/1/withdrawals`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);
        return new runtime.JSONApiResponse(response, (jsonValue) => (0, models_1.CreateWithdrawalResponseFromJSON)(jsonValue));
    }
    /**
     * Creates a new withdrawal request to the specified beneficiary.  Permissions required: <code>Perm_W_Withdrawals</code>
     * Request a withdrawal
     */
    async createWithdrawal(requestParameters, initOverrides) {
        const response = await this.createWithdrawalRaw(requestParameters, initOverrides);
        return await response.value();
    }
    /**
     * Returns the status of a particular withdrawal request.  Permissions required: <code>Perm_R_Withdrawals</code>
     * Get withdrawal request
     */
    async getWithdrawalRaw(requestParameters, initOverrides) {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id', 'Required parameter requestParameters.id was null or undefined when calling getWithdrawal.');
        }
        const queryParameters = {};
        const headerParameters = {};
        const response = await this.request({
            path: `/api/1/withdrawals/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);
        return new runtime.JSONApiResponse(response, (jsonValue) => (0, models_1.GetWithdrawalResponseFromJSON)(jsonValue));
    }
    /**
     * Returns the status of a particular withdrawal request.  Permissions required: <code>Perm_R_Withdrawals</code>
     * Get withdrawal request
     */
    async getWithdrawal(requestParameters, initOverrides) {
        const response = await this.getWithdrawalRaw(requestParameters, initOverrides);
        return await response.value();
    }
    /**
     * Returns a list of the most recent confirmed transfers ordered from newest to oldest. This includes bank transfers, card payments, or on-chain transactions that have been reflected on your account available balance.  Note that the Transfer `amount` is always a positive value and you should use the `inbound` flag to determine the direction of the transfer.  If you need to paginate the results you can set the `before` parameter to the last returned transfer `created_at` field value and repeat the request until you have all the transfers you need. This endpoint will list up to 100 transfers at a time by default.  This endpoint is in BETA, behaviour and specification may change without any previous notice.  Permissions required: <Code>Perm_R_Transfers</Code>
     * List transfers (BETA)
     */
    async listTransfersRaw(requestParameters, initOverrides) {
        if (requestParameters.accountId === null || requestParameters.accountId === undefined) {
            throw new runtime.RequiredError('accountId', 'Required parameter requestParameters.accountId was null or undefined when calling listTransfers.');
        }
        const queryParameters = {};
        if (requestParameters.accountId !== undefined) {
            queryParameters['account_id'] = requestParameters.accountId;
        }
        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }
        if (requestParameters.before !== undefined) {
            queryParameters['before'] = requestParameters.before;
        }
        const headerParameters = {};
        const response = await this.request({
            path: `/api/exchange/1/transfers`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);
        return new runtime.JSONApiResponse(response, (jsonValue) => (0, models_1.ListTransfersResponseFromJSON)(jsonValue));
    }
    /**
     * Returns a list of the most recent confirmed transfers ordered from newest to oldest. This includes bank transfers, card payments, or on-chain transactions that have been reflected on your account available balance.  Note that the Transfer `amount` is always a positive value and you should use the `inbound` flag to determine the direction of the transfer.  If you need to paginate the results you can set the `before` parameter to the last returned transfer `created_at` field value and repeat the request until you have all the transfers you need. This endpoint will list up to 100 transfers at a time by default.  This endpoint is in BETA, behaviour and specification may change without any previous notice.  Permissions required: <Code>Perm_R_Transfers</Code>
     * List transfers (BETA)
     */
    async listTransfers(requestParameters, initOverrides) {
        const response = await this.listTransfersRaw(requestParameters, initOverrides);
        return await response.value();
    }
    /**
     * Returns a list of withdrawal requests.  Permissions required: <code>Perm_R_Withdrawals</code>
     * List withdrawal requests
     */
    async listWithdrawalsRaw(requestParameters, initOverrides) {
        const queryParameters = {};
        if (requestParameters.beforeId !== undefined) {
            queryParameters['before_id'] = requestParameters.beforeId;
        }
        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }
        const headerParameters = {};
        const response = await this.request({
            path: `/api/1/withdrawals`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);
        return new runtime.JSONApiResponse(response, (jsonValue) => (0, models_1.ListWithdrawalsResponseFromJSON)(jsonValue));
    }
    /**
     * Returns a list of withdrawal requests.  Permissions required: <code>Perm_R_Withdrawals</code>
     * List withdrawal requests
     */
    async listWithdrawals(requestParameters = {}, initOverrides) {
        const response = await this.listWithdrawalsRaw(requestParameters, initOverrides);
        return await response.value();
    }
}
exports.TransfersApi = TransfersApi;
//# sourceMappingURL=TransfersApi.js.map