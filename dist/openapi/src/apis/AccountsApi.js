"use strict";
/* tslint:disable */
/* eslint-disable */
/**
 * Luno API
 * The Luno API provides developers with a wealth of financial information provided through the Luno platform.  Through this secure system developers can:  <ul>    <li>Create accounts for trading in cryptocurrencies</li>    <li>Access current and historic cryptocurrency market data</li>    <li>Submit trade orders and view order status</li>    <li>Buy and sell Bitcoin and Ethereum</li>    <li>Send and receive Bitcoin and Ethereum</li>    <li>Generate Bitcoin and Ethereum wallet addresses</li>  </ul>   The Luno API brings the world of Bitcoin and Ethereum to your doorstep.
 *
 * The version of the OpenAPI document: 1.0.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.AccountsApi = void 0;
const runtime = __importStar(require("../runtime"));
const models_1 = require("../models");
/**
 *
 */
class AccountsApi extends runtime.BaseAPI {
    /**
     * This request creates an Account for the specified currency.  Please note that the balances for the Account will be displayed based on the <code>asset</code> value, which is the currency the Account is based on.  Permissions required: <code>Perm_W_Addresses</code>
     * # Create account
     */
    async createAccountRaw(requestParameters, initOverrides) {
        if (requestParameters.currency === null || requestParameters.currency === undefined) {
            throw new runtime.RequiredError('currency', 'Required parameter requestParameters.currency was null or undefined when calling createAccount.');
        }
        if (requestParameters.name === null || requestParameters.name === undefined) {
            throw new runtime.RequiredError('name', 'Required parameter requestParameters.name was null or undefined when calling createAccount.');
        }
        const queryParameters = {};
        if (requestParameters.currency !== undefined) {
            queryParameters['currency'] = requestParameters.currency;
        }
        if (requestParameters.name !== undefined) {
            queryParameters['name'] = requestParameters.name;
        }
        const headerParameters = {};
        const response = await this.request({
            path: `/api/1/accounts`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);
        return new runtime.JSONApiResponse(response, (jsonValue) => (0, models_1.CreateAccountResponseFromJSON)(jsonValue));
    }
    /**
     * This request creates an Account for the specified currency.  Please note that the balances for the Account will be displayed based on the <code>asset</code> value, which is the currency the Account is based on.  Permissions required: <code>Perm_W_Addresses</code>
     * # Create account
     */
    async createAccount(requestParameters, initOverrides) {
        const response = await this.createAccountRaw(requestParameters, initOverrides);
        return await response.value();
    }
    /**
     * The list of all Accounts and their respective balances for the requesting user.  Permissions required: <code>Perm_R_Balance</code>
     * # List account balances
     */
    async getBalancesRaw(requestParameters, initOverrides) {
        const queryParameters = {};
        if (requestParameters.assets) {
            queryParameters['assets'] = requestParameters.assets.join(runtime.COLLECTION_FORMATS["csv"]);
        }
        const headerParameters = {};
        const response = await this.request({
            path: `/api/1/balance`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);
        return new runtime.JSONApiResponse(response, (jsonValue) => (0, models_1.GetBalancesResponseFromJSON)(jsonValue));
    }
    /**
     * The list of all Accounts and their respective balances for the requesting user.  Permissions required: <code>Perm_R_Balance</code>
     * # List account balances
     */
    async getBalances(requestParameters = {}, initOverrides) {
        const response = await this.getBalancesRaw(requestParameters, initOverrides);
        return await response.value();
    }
    /**
     * Get a specific move funds instruction by either <code>id</code> or <code>client_move_id</code>. If both are provided an API error will be returned.  This endpoint is in BETA, behaviour and specification may change without any previous notice.  Permissions required: <code>MP_None</code>
     * Move (BETA)
     */
    async getMoveRaw(requestParameters, initOverrides) {
        const queryParameters = {};
        if (requestParameters.id !== undefined) {
            queryParameters['id'] = requestParameters.id;
        }
        if (requestParameters.clientMoveId !== undefined) {
            queryParameters['client_move_id'] = requestParameters.clientMoveId;
        }
        const headerParameters = {};
        const response = await this.request({
            path: `/api/exchange/1/move`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);
        return new runtime.JSONApiResponse(response, (jsonValue) => (0, models_1.GetMoveResponseFromJSON)(jsonValue));
    }
    /**
     * Get a specific move funds instruction by either <code>id</code> or <code>client_move_id</code>. If both are provided an API error will be returned.  This endpoint is in BETA, behaviour and specification may change without any previous notice.  Permissions required: <code>MP_None</code>
     * Move (BETA)
     */
    async getMove(requestParameters = {}, initOverrides) {
        const response = await this.getMoveRaw(requestParameters, initOverrides);
        return await response.value();
    }
    /**
     * Returns a list of the most recent moves ordered from newest to oldest. This endpoint will list up to 100 most recent moves by default.  This endpoint is in BETA, behaviour and specification may change without any previous notice.  Permissions required: <code>MP_None</code>
     * ListMoves (BETA)
     */
    async listMovesRaw(requestParameters, initOverrides) {
        const queryParameters = {};
        if (requestParameters.before !== undefined) {
            queryParameters['before'] = requestParameters.before;
        }
        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }
        const headerParameters = {};
        const response = await this.request({
            path: `/api/exchange/1/move/list_moves`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);
        return new runtime.JSONApiResponse(response, (jsonValue) => (0, models_1.ListMovesResponseFromJSON)(jsonValue));
    }
    /**
     * Returns a list of the most recent moves ordered from newest to oldest. This endpoint will list up to 100 most recent moves by default.  This endpoint is in BETA, behaviour and specification may change without any previous notice.  Permissions required: <code>MP_None</code>
     * ListMoves (BETA)
     */
    async listMoves(requestParameters = {}, initOverrides) {
        const response = await this.listMovesRaw(requestParameters, initOverrides);
        return await response.value();
    }
    /**
     * Return a list of all transactions that have not completed for the Account.  Pending transactions are not numbered, and may be reordered, deleted or updated at any time.  Permissions required: <code>Perm_R_Transactions</code>
     * # List pending transactions
     */
    async listPendingTransactionsRaw(requestParameters, initOverrides) {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id', 'Required parameter requestParameters.id was null or undefined when calling listPendingTransactions.');
        }
        const queryParameters = {};
        const headerParameters = {};
        const response = await this.request({
            path: `/api/1/accounts/{id}/pending`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);
        return new runtime.JSONApiResponse(response, (jsonValue) => (0, models_1.ListPendingTransactionsResponseFromJSON)(jsonValue));
    }
    /**
     * Return a list of all transactions that have not completed for the Account.  Pending transactions are not numbered, and may be reordered, deleted or updated at any time.  Permissions required: <code>Perm_R_Transactions</code>
     * # List pending transactions
     */
    async listPendingTransactions(requestParameters, initOverrides) {
        const response = await this.listPendingTransactionsRaw(requestParameters, initOverrides);
        return await response.value();
    }
    /**
     * Return a list of transaction entries from an account.  Transaction entry rows are numbered sequentially starting from 1, where 1 is the oldest entry. The range of rows to return are specified with the <code>min_row</code> (inclusive) and <code>max_row</code> (exclusive) parameters. At most 1000 rows can be requested per call.  If <code>min_row</code> or <code>max_row</code> is non-positive, the range wraps around the most recent row. For example, to fetch the 100 most recent rows, use <code>min_row=-100</code> and <code>max_row=0</code>.  Permissions required: <code>Perm_R_Transactions</code>
     * # List transactions
     */
    async listTransactionsRaw(requestParameters, initOverrides) {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id', 'Required parameter requestParameters.id was null or undefined when calling listTransactions.');
        }
        if (requestParameters.minRow === null || requestParameters.minRow === undefined) {
            throw new runtime.RequiredError('minRow', 'Required parameter requestParameters.minRow was null or undefined when calling listTransactions.');
        }
        if (requestParameters.maxRow === null || requestParameters.maxRow === undefined) {
            throw new runtime.RequiredError('maxRow', 'Required parameter requestParameters.maxRow was null or undefined when calling listTransactions.');
        }
        const queryParameters = {};
        if (requestParameters.minRow !== undefined) {
            queryParameters['min_row'] = requestParameters.minRow;
        }
        if (requestParameters.maxRow !== undefined) {
            queryParameters['max_row'] = requestParameters.maxRow;
        }
        const headerParameters = {};
        const response = await this.request({
            path: `/api/1/accounts/{id}/transactions`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);
        return new runtime.JSONApiResponse(response, (jsonValue) => (0, models_1.ListTransactionsResponseFromJSON)(jsonValue));
    }
    /**
     * Return a list of transaction entries from an account.  Transaction entry rows are numbered sequentially starting from 1, where 1 is the oldest entry. The range of rows to return are specified with the <code>min_row</code> (inclusive) and <code>max_row</code> (exclusive) parameters. At most 1000 rows can be requested per call.  If <code>min_row</code> or <code>max_row</code> is non-positive, the range wraps around the most recent row. For example, to fetch the 100 most recent rows, use <code>min_row=-100</code> and <code>max_row=0</code>.  Permissions required: <code>Perm_R_Transactions</code>
     * # List transactions
     */
    async listTransactions(requestParameters, initOverrides) {
        const response = await this.listTransactionsRaw(requestParameters, initOverrides);
        return await response.value();
    }
    /**
     * Move funds between two of your accounts with the same currency The funds may not be moved by the time the request returns. The GET method can be used to poll for the move\'s status.  Note: moves will show as transactions, but not as transfers.  This endpoint is in BETA, behaviour and specification may change without any previous notice.  Permissions required: <code>MP_None_Write</code>
     * Move (BETA)
     */
    async moveRaw(requestParameters, initOverrides) {
        if (requestParameters.amount === null || requestParameters.amount === undefined) {
            throw new runtime.RequiredError('amount', 'Required parameter requestParameters.amount was null or undefined when calling move.');
        }
        if (requestParameters.debitAccountId === null || requestParameters.debitAccountId === undefined) {
            throw new runtime.RequiredError('debitAccountId', 'Required parameter requestParameters.debitAccountId was null or undefined when calling move.');
        }
        if (requestParameters.creditAccountId === null || requestParameters.creditAccountId === undefined) {
            throw new runtime.RequiredError('creditAccountId', 'Required parameter requestParameters.creditAccountId was null or undefined when calling move.');
        }
        const queryParameters = {};
        if (requestParameters.amount !== undefined) {
            queryParameters['amount'] = requestParameters.amount;
        }
        if (requestParameters.debitAccountId !== undefined) {
            queryParameters['debit_account_id'] = requestParameters.debitAccountId;
        }
        if (requestParameters.creditAccountId !== undefined) {
            queryParameters['credit_account_id'] = requestParameters.creditAccountId;
        }
        if (requestParameters.clientMoveId !== undefined) {
            queryParameters['client_move_id'] = requestParameters.clientMoveId;
        }
        const headerParameters = {};
        const response = await this.request({
            path: `/api/exchange/1/move`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);
        return new runtime.JSONApiResponse(response, (jsonValue) => (0, models_1.MoveResponseFromJSON)(jsonValue));
    }
    /**
     * Move funds between two of your accounts with the same currency The funds may not be moved by the time the request returns. The GET method can be used to poll for the move\'s status.  Note: moves will show as transactions, but not as transfers.  This endpoint is in BETA, behaviour and specification may change without any previous notice.  Permissions required: <code>MP_None_Write</code>
     * Move (BETA)
     */
    async move(requestParameters, initOverrides) {
        const response = await this.moveRaw(requestParameters, initOverrides);
        return await response.value();
    }
    /**
     * Update the name of an account with a given ID.  Permissions required: <code>Perm_W_Addresses</code>
     * # Update Account Name
     */
    async updateAccountNameRaw(requestParameters, initOverrides) {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id', 'Required parameter requestParameters.id was null or undefined when calling updateAccountName.');
        }
        if (requestParameters.name === null || requestParameters.name === undefined) {
            throw new runtime.RequiredError('name', 'Required parameter requestParameters.name was null or undefined when calling updateAccountName.');
        }
        const queryParameters = {};
        if (requestParameters.name !== undefined) {
            queryParameters['name'] = requestParameters.name;
        }
        const headerParameters = {};
        const response = await this.request({
            path: `/api/1/accounts/{id}/name`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);
        return new runtime.JSONApiResponse(response, (jsonValue) => (0, models_1.UpdateAccountNameResponseFromJSON)(jsonValue));
    }
    /**
     * Update the name of an account with a given ID.  Permissions required: <code>Perm_W_Addresses</code>
     * # Update Account Name
     */
    async updateAccountName(requestParameters, initOverrides) {
        const response = await this.updateAccountNameRaw(requestParameters, initOverrides);
        return await response.value();
    }
}
exports.AccountsApi = AccountsApi;
//# sourceMappingURL=AccountsApi.js.map