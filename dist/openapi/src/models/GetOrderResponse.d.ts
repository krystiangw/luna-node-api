/**
 * Luno API
 * The Luno API provides developers with a wealth of financial information provided through the Luno platform.  Through this secure system developers can:  <ul>    <li>Create accounts for trading in cryptocurrencies</li>    <li>Access current and historic cryptocurrency market data</li>    <li>Submit trade orders and view order status</li>    <li>Buy and sell Bitcoin and Ethereum</li>    <li>Send and receive Bitcoin and Ethereum</li>    <li>Generate Bitcoin and Ethereum wallet addresses</li>  </ul>   The Luno API brings the world of Bitcoin and Ethereum to your doorstep.
 *
 * The version of the OpenAPI document: 1.0.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
/**
 * GetOrderResponse response
 * @export
 * @interface GetOrderResponse
 */
export interface GetOrderResponse {
    /**
     * Amount of base filled, this value is always positive.
     * @type {string}
     * @memberof GetOrderResponse
     */
    base?: string;
    /**
     * Time of order completion (Unix milliseconds)
     *
     * This value is set at the time of this order leaving the order book,
     * either immediately upon posting or later on due to a trade or cancellation.
     * Whilst the order is still pending/live it will be 0.
     * @type {string}
     * @memberof GetOrderResponse
     */
    completedTimestamp?: string;
    /**
     * Amount of counter filled, this value is always positive.
     * @type {string}
     * @memberof GetOrderResponse
     */
    counter?: string;
    /**
     * Time of order creation (Unix milliseconds)
     * @type {string}
     * @memberof GetOrderResponse
     */
    creationTimestamp?: string;
    /**
     * Time of order expiration (Unix milliseconds)
     *
     * This value is set at the time of processing a request from you to cancel the order, otherwise it will be 0.
     * @type {string}
     * @memberof GetOrderResponse
     */
    expirationTimestamp?: string;
    /**
     * Base amount of fees to be charged
     * @type {string}
     * @memberof GetOrderResponse
     */
    feeBase?: string;
    /**
     * Counter amount of fees to be charged
     * @type {string}
     * @memberof GetOrderResponse
     */
    feeCounter?: string;
    /**
     * Limit price to transact
     * @type {string}
     * @memberof GetOrderResponse
     */
    limitPrice?: string;
    /**
     * Limit volume to transact
     * @type {string}
     * @memberof GetOrderResponse
     */
    limitVolume?: string;
    /**
     *
     * @type {string}
     * @memberof GetOrderResponse
     */
    orderId?: string;
    /**
     * Specifies the market.
     * @type {string}
     * @memberof GetOrderResponse
     */
    pair?: string;
    /**
     * <code>PENDING</code> The order has been placed. Some trades may have
     * taken place but the order is not filled yet.<br>
     * <code>COMPLETE</code> The order is no longer active. It has been settled
     * or has been cancelled.
     * @type {string}
     * @memberof GetOrderResponse
     */
    state?: GetOrderResponseStateEnum;
    /**
     * The Time in force option used when the LimitOrder was posted.
     *
     * Only returned on limit orders.<br>
     * <code>GTC</code> Good 'Til Cancelled. The order remains open until it is filled or cancelled by the user. (default)</br>
     * <code>IOC</code> Immediate Or Cancel. The part of the order that cannot be filled immediately will be cancelled. Cannot be post-only.</br>
     * <code>FOK</code> Fill Or Kill. If the order cannot be filled immediately and completely it will be cancelled before any trade. Cannot be post-only.
     * @type {string}
     * @memberof GetOrderResponse
     */
    timeInForce?: string;
    /**
     * <code>BUY</code> buy market order.<br>
     * <code>SELL</code> sell market order.<br>
     * <code>BID</code> bid (buy) limit order.<br>
     * <code>ASK</code> ask (sell) limit order.
     * @type {string}
     * @memberof GetOrderResponse
     */
    type?: GetOrderResponseTypeEnum;
}
/**
 * @export
 */
export declare const GetOrderResponseStateEnum: {
    readonly Pending: "PENDING";
    readonly Complete: "COMPLETE";
};
export type GetOrderResponseStateEnum = typeof GetOrderResponseStateEnum[keyof typeof GetOrderResponseStateEnum];
/**
 * @export
 */
export declare const GetOrderResponseTypeEnum: {
    readonly Buy: "BUY";
    readonly Sell: "SELL";
    readonly Bid: "BID";
    readonly Ask: "ASK";
};
export type GetOrderResponseTypeEnum = typeof GetOrderResponseTypeEnum[keyof typeof GetOrderResponseTypeEnum];
/**
 * Check if a given object implements the GetOrderResponse interface.
 */
export declare function instanceOfGetOrderResponse(value: object): boolean;
export declare function GetOrderResponseFromJSON(json: any): GetOrderResponse;
export declare function GetOrderResponseFromJSONTyped(json: any, ignoreDiscriminator: boolean): GetOrderResponse;
export declare function GetOrderResponseToJSON(value?: GetOrderResponse | null): any;
//# sourceMappingURL=GetOrderResponse.d.ts.map