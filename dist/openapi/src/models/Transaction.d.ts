/**
 * Luno API
 * The Luno API provides developers with a wealth of financial information provided through the Luno platform.  Through this secure system developers can:  <ul>    <li>Create accounts for trading in cryptocurrencies</li>    <li>Access current and historic cryptocurrency market data</li>    <li>Submit trade orders and view order status</li>    <li>Buy and sell Bitcoin and Ethereum</li>    <li>Send and receive Bitcoin and Ethereum</li>    <li>Generate Bitcoin and Ethereum wallet addresses</li>  </ul>   The Luno API brings the world of Bitcoin and Ethereum to your doorstep.
 *
 * The version of the OpenAPI document: 1.0.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
import type { DetailFields } from './DetailFields';
/**
 *
 * @export
 * @interface Transaction
 */
export interface Transaction {
    /**
     *
     * @type {string}
     * @memberof Transaction
     */
    accountId?: string;
    /**
     * Amount available
     * @type {string}
     * @memberof Transaction
     */
    available?: string;
    /**
     * Change in amount available
     * @type {string}
     * @memberof Transaction
     */
    availableDelta?: string;
    /**
     * Account balance
     * @type {string}
     * @memberof Transaction
     */
    balance?: string;
    /**
     * Change in balance
     * @type {string}
     * @memberof Transaction
     */
    balanceDelta?: string;
    /**
     *
     * @type {string}
     * @memberof Transaction
     */
    currency?: string;
    /**
     * Human-readable description of the transaction.
     * @type {string}
     * @memberof Transaction
     */
    description?: string;
    /**
     *
     * @type {DetailFields}
     * @memberof Transaction
     */
    detailFields?: DetailFields;
    /**
     * Human-readable label-value attributes.
     * @type {{ [key: string]: string; }}
     * @memberof Transaction
     */
    details?: {
        [key: string]: string;
    };
    /**
     * The kind of the transaction indicates the transaction flow
     *
     * Kinds explained:<br>
     * <code>FEE</code> when transaction is towards Luno fees<br>
     * <code>TRANSFER</code> when the transaction is a one way flow of funds, e.g. a deposit or crypto send<br>
     * <code>EXCHANGE</code> when the transaction is part of a two way exchange, e.g. a trade or instant buy
     * @type {string}
     * @memberof Transaction
     */
    kind?: TransactionKindEnum;
    /**
     * A unique reference for the transaction this statement entry relates to.
     * There may be multiple statement entries related to the same transaction.
     * E.g. a withdrawal and the withdrawal fee are two separate statement entries with the same reference.
     * @type {string}
     * @memberof Transaction
     */
    reference?: string;
    /**
     *
     * @type {number}
     * @memberof Transaction
     */
    rowIndex?: number;
    /**
     * Unix timestamp, in milliseconds
     * @type {string}
     * @memberof Transaction
     */
    timestamp?: string;
}
/**
 * @export
 */
export declare const TransactionKindEnum: {
    readonly Fee: "FEE";
    readonly Transfer: "TRANSFER";
    readonly Exchange: "EXCHANGE";
    readonly Interest: "INTEREST";
};
export type TransactionKindEnum = typeof TransactionKindEnum[keyof typeof TransactionKindEnum];
/**
 * Check if a given object implements the Transaction interface.
 */
export declare function instanceOfTransaction(value: object): boolean;
export declare function TransactionFromJSON(json: any): Transaction;
export declare function TransactionFromJSONTyped(json: any, ignoreDiscriminator: boolean): Transaction;
export declare function TransactionToJSON(value?: Transaction | null): any;
//# sourceMappingURL=Transaction.d.ts.map