/**
 * Luno API
 * The Luno API provides developers with a wealth of financial information provided through the Luno platform.  Through this secure system developers can:  <ul>    <li>Create accounts for trading in cryptocurrencies</li>    <li>Access current and historic cryptocurrency market data</li>    <li>Submit trade orders and view order status</li>    <li>Buy and sell Bitcoin and Ethereum</li>    <li>Send and receive Bitcoin and Ethereum</li>    <li>Generate Bitcoin and Ethereum wallet addresses</li>  </ul>   The Luno API brings the world of Bitcoin and Ethereum to your doorstep.
 *
 * The version of the OpenAPI document: 1.0.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
/**
 * The `base` and `counter` amounts are the principal
 * amounts that were traded, ignoring fees. For example, if the order resulted
 * in a single trade of 1 BTC for 1000 ZAR, then `base`=1 BTC and
 * `counter`=1000 ZAR.
 *
 * The `fee_base` and `fee_counter` amounts are the fees
 * debited after the trade principal amounts.
 *
 * For example, for a buy order, `base - base_fee` would be credited
 * to the BTC account and `counter + counter_fee` would be debited
 * from the ZAR account. Similarly, for a sell order, `counter -
 * counter_fee` would be credited to the ZAR account and `base +
 * base_fee` would be debited from the BTC account.
 * @export
 * @interface Order
 */
export interface Order {
    /**
     * Amount of base filled, this value is always positive.
     * @type {string}
     * @memberof Order
     */
    base?: string;
    /**
     * Time of order completion (Unix milliseconds)
     *
     * This value is set at the time of this order leaving the order book,
     * either immediately upon posting or later on due to a trade or cancellation.
     * Whilst the order is still pending/live it will be 0.
     * @type {string}
     * @memberof Order
     */
    completedTimestamp?: string;
    /**
     * Amount of counter filled, this value is always positive.
     * @type {string}
     * @memberof Order
     */
    counter?: string;
    /**
     * Time of order creation (Unix milliseconds)
     * @type {string}
     * @memberof Order
     */
    creationTimestamp?: string;
    /**
     * Time of order expiration (Unix milliseconds)
     *
     * This value is set at the time of processing a request from you to cancel the order, otherwise it will be 0.
     * @type {string}
     * @memberof Order
     */
    expirationTimestamp?: string;
    /**
     * Base amount of fees to be charged
     * @type {string}
     * @memberof Order
     */
    feeBase?: string;
    /**
     * Counter amount of fees to be charged
     * @type {string}
     * @memberof Order
     */
    feeCounter?: string;
    /**
     * Limit price to transact
     * @type {string}
     * @memberof Order
     */
    limitPrice?: string;
    /**
     * Limit volume to transact
     * @type {string}
     * @memberof Order
     */
    limitVolume?: string;
    /**
     *
     * @type {string}
     * @memberof Order
     */
    orderId?: string;
    /**
     * Specifies the market.
     * @type {string}
     * @memberof Order
     */
    pair?: string;
    /**
     * <code>PENDING</code> The order has been placed. Some trades may have
     * taken place but the order is not filled yet.<br>
     * <code>COMPLETE</code> The order is no longer active. It has been settled
     * or has been cancelled.
     * @type {string}
     * @memberof Order
     */
    state?: OrderStateEnum;
    /**
     * The Time in force option used when the LimitOrder was posted.
     *
     * Only returned on limit orders.<br>
     * <code>GTC</code> Good 'Til Cancelled. The order remains open until it is filled or cancelled by the user. (default)</br>
     * <code>IOC</code> Immediate Or Cancel. The part of the order that cannot be filled immediately will be cancelled. Cannot be post-only.</br>
     * <code>FOK</code> Fill Or Kill. If the order cannot be filled immediately and completely it will be cancelled before any trade. Cannot be post-only.
     * @type {string}
     * @memberof Order
     */
    timeInForce?: string;
    /**
     * <code>BUY</code> buy market order.<br>
     * <code>SELL</code> sell market order.<br>
     * <code>BID</code> bid (buy) limit order.<br>
     * <code>ASK</code> ask (sell) limit order.
     * @type {string}
     * @memberof Order
     */
    type?: OrderTypeEnum;
}
/**
 * @export
 */
export declare const OrderStateEnum: {
    readonly Pending: "PENDING";
    readonly Complete: "COMPLETE";
};
export type OrderStateEnum = typeof OrderStateEnum[keyof typeof OrderStateEnum];
/**
 * @export
 */
export declare const OrderTypeEnum: {
    readonly Buy: "BUY";
    readonly Sell: "SELL";
    readonly Bid: "BID";
    readonly Ask: "ASK";
};
export type OrderTypeEnum = typeof OrderTypeEnum[keyof typeof OrderTypeEnum];
/**
 * Check if a given object implements the Order interface.
 */
export declare function instanceOfOrder(value: object): boolean;
export declare function OrderFromJSON(json: any): Order;
export declare function OrderFromJSONTyped(json: any, ignoreDiscriminator: boolean): Order;
export declare function OrderToJSON(value?: Order | null): any;
//# sourceMappingURL=Order.d.ts.map